# create at 2018.1.5
## learn slice notes

一、learning web
	1、https://blog.golang.org/go-slices-usage-and-internals


1、一个切片的零值是nil,对于一个空的切片，它的长度和容量都是零，并且不指向底层元素。
2、切片不会拷贝切片的数组，她创建了一个指向初始数组的指针，这样就使得切片操作和数组操作
一样，方便快捷。
	因此，改变一个切片的值，实际上就是改变其初始切片(或者数组)的值。
3、切片的增长不能超过它的容量，如果尝试这么做了，就会造成panic
	对于切片的赋值，可以使用内置的copy函数。
	func copy(dst,src []T)int
	返回复制元素的数量
4、切片的常规操作就是向切片中追加元素。
	func append(s []T , x ...T)[]T
	向一个切片中追加另外一个切片
	a:=make([]int,0)
	b:=make([]int,0)
	a=append(a,b...)
5、在一个切片的基础上再次切片是不能创建底层数组的拷贝的。
	例如：底层的数组很大，但是这个切片用的数据是很少的，所以，只要这个切片还在，这个数组就不会被garbage collector释放掉。
	为了纠正这个bug,可以在我们获取这些有价值的切片之前，将这些切片保存到一个临时切片中，然后返回。
	func CopyDigits(filename string) []byte {
		b, _ := ioutil.ReadFile(filename)
		b = digitRegexp.Find(b)
		c := make([]byte, len(b))
		copy(c, b)
		return c
	}
6、切片中某一个元素的索引可能会小于底层数组中相同元素的索引。
7、数组一旦被初始化，这个切片就会和底层数组相关联，这样的话，不同的切片可能在底层拥有相同的数组。
	但是不同的数组拥有不同的存储空间。
8、将切片作为参数进行传递类似于 传递一个指向底层数组的指针
9、type LinesOfText [][]byte     // A slice of byte slices.
	也就是这个LinesOfText切片，里面存放的元素类型就是一个切片。里面切片长度的类型也可能是不同的。
10、切片中带有三个冒号的用法
	https://www.07net01.com/2017/07/1888516.html
	https://www.goinggo.net/2013/12/three-index-slices-in-go-12.html
	https://tip.golang.org/doc/go1.2#three_index
	https://docs.google.com/document/d/1GKKdiGYAghXRxC2BFrSEbHBZZgAGKQ-yXK-hRKBo0Kk/pub  // 更新日志
	
	从上面的三个网址中，可以得出一个结论就是这个在切片中的三个":"，是从golang的1.2版本之后开始的。
	
		data := [...]int{1, 2, 3, 4}
		v:=data[:2:3]
	含义：表示从底层索引值0开始,长度为2,容量为3的切片。意味着创建了一个容量受限的切片,限制容量为底层数组提供了一定程度的保护，可以使我们更好地控制附加操作。
		v:=data[2:3]
	含义：表示从底层索引值为2开始,长度为1,容量为2的切片。
	
	a[i : j : k]
	constructs a slice. The result has indices starting at 0, length equal to j - i, and capacity equal to k - i. 
	The evaluation panics if i ≤ j ≤ k ≤ cap(a) is not true.
Defaults for j and k

There are a number of sensible possibilities for what the defaults for j and k should be. They are recorded here for discussion later, after we have real use cases against which we can evaluate them. We are not interested in discussing these now.

The examples assume x = make([]int, 10, 20).

The comparison ≡ means the slices have the same base, len, and cap.

Case 1: j defaults to len(x), k defaults to cap(x).

x[i::] ≡ x[i:]

x[i:j:] ≡ x[i:j]

x[::] ≡ x

x[::n] depends on n vs len

x[::15] ≡ x[0:10:15]

x[::5] panics (implicit j = 10 > k = 5)

x[0:15:] ≡ x[0:15]

Case 2: j defaults to k, k defaults to cap(x)

        x[i::] ≡ x[i:20]

        x[i:j:] ≡ x[i:j]

        x[::] ≡ x[:20]  // an idiom for growing a slice?

        x[::n] ≡ x[0:n:n]

        x[::15] ≡ x[0:15:15]

        x[::5] ≡ x[0:5:5]

        x[0:15:] ≡ x[0:15]

Case 3: j defaults to min(len(x), k), k defaults to cap(x)

x[i::] ≡ x[i:]

x[i:j:] ≡ x[i:j]

x[::] ≡ x

x[::n] depends on n vs len

x[::15] = x[0:10:15] // len stayed where it was

x[::5] ≡ x[0:5:5] // len pulled down by new cap

x[0:15:] ≡ x[0:15]

Case 4: j defaults to len(x), k defaults to len(x)

        x[i::] ≡ x[i:10:10], NOT same as x[i:]

        x[i:j:] ≡ x[i:j:10], NOT same as x[i:j]

        x[::] ≡ x[0:10:10]  // an idiom for shrinking a slice?

        x[::15] ≡ x[0:10:15]

        x[::5] panics (implicit j = 10 > k = 5)

        x[0:15:] panics (j = 15 > implicit k = 10), NOT same as x[0:15]

Case 5: j defaults to k, k defaults to len(x).

        x[i::] ≡ x[i:10:10], NOT same as x[i:]

        x[i:j:] ≡ x[i:j:10], NOT same as x[i:j]

        x[::] ≡ x[:10:10]  // an idiom for shrinking a slice?

        x[::15] ≡ x[0:15:15] // slice cap shrank, len grew

        x[::5] ≡ x[0:5:5]

        x[0:15:] panics (j = 15 > implicit k = 10)

Case 6: j defaults to min(len(x), k), k defaults to len(x).

        x[i::] ≡ x[i:10:10], NOT same as x[i:]

        x[i:j:] ≡ x[i:j:10], NOT same as x[i:j]

        x[::] ≡ x[:10:10]  // an idiom for shrinking a slice?

        x[::15] ≡ x[0:10:15]  // len stayed where it was

x[::5] ≡ x[0:5:5]  // len pulled down by new cap

        x[0:15:] panics (j = 15 > implicit k = 10)
		
		

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	