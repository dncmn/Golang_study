Map---学习
	
参考网站：
	https://blog.golang.org/go-maps-in-action
	https://golang.org/doc/faq#atomic_maps
1、定义一个map
	1.1、var demoMap1 = map[int32]string{key1:value1,.....}
		定义一个map 类似如下结构 map[keyType]valueType
		keyType:可以是任意的可比较类型的
		valueType:可以是任意类型。不同的类型,不同的用处,比如空结构体类型还有interface{}类型
	1.2、var m map[int]int
		 因为map和slice、pointer一样,都是指针类型(reference tpyes),所以这个m的值就是nil,因为它未指向内存中的任何一块区域。
		 所以,当对m进行读操作的时候,不会报错,如果进行写操作就会报panic(空指针异常)
	1.3、从map中删除一个元素使用golang的内置函数delete(mapName,keyName)
		,如果这个key不存在的话,将不会有任何操作。
	1.4、可以使用相同的语法来初始化一个空的map
			c:=map[int]string{}
			很搞笑的一件事：当初看到一道面试题,居然问道还可以这样初始话一个map。很是可笑
			虽然不是什么知识点,但是仍然可以写出来,怀念一下。
	1.5、 data:=make(map[int]bool)
		  对于值类型是boolean类型的map,在for...range遍历之前可以使用类似 if data[key]{}的结构,不用使用for循环进行多余的判断。
		  data := make(map[int]bool)
		  data[1] = true
		  data[2] = false
		  for k, v := range data {
			if v {
				log.Printf("key= %d is exists,value=%v", k, v)
				continue
			}

			log.Printf("key=%d is not exists", k)
		}
	1.6、map用到的一个用法就是map里面嵌套一个map
		比如我用的一个 CritReward:=make(map[int32]map[int32]float32)
		关卡id---->(暴击道具的id:暴击的比例)
		每一个关卡,可能会出现多个道具出现暴击,所以会出现map套用map
	1.7、map在并发使用的时候,不是安全的。因为它没有定义如果同时对他进行读和写会发生什么。
		如果需要从并发的goroutines中对某个map进行读和写,那么这个多goroutine访问的过程一定会有
		一种同步的机制来进行调节。一个常用的方法就是使用sync.RWMutex(在项目中,会对玩家进行加锁)
		还有一个例子
			var counter=struct{
				sync.RWMutex
				m map[string]int
			}{m:make(map[string]int)}
			
			// to read from counter,take read lock
				counter.RLock()
				n:=counter.m["one"]
				counter.RUnlock()
				log.Println("one=",n)
			
			// to write to the counter,take the write lock
				couonter.lock()
				counter.m["manan"]++
				couner.Unlock()
	1.8、并发的小阅读
		https://golang.org/doc/faq#atomic_maps
		我们调用goroutine的结果是非常廉价的,它们在堆栈内占用内存很少只有几千字节。
		
	Why are map operations not defined to be atomic?

		After long discussion it was decided that the typical use of maps did not require safe access from multiple goroutines, and in those 	cases where it did, the map was probably part of some larger data structure or computation that was already synchronized. Therefore 			requiring that all map operations grab a mutex would slow down most programs and add safety to few. This was not an easy decision, however, 	since it means uncontrolled map access can crash the program.
		The language does not preclude atomic map updates. When required, such as when hosting an untrusted program, the implementation could interlock map access. 

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	