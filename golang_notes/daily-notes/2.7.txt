## 2.7day-notes

二、random-notes
1、
	0	000
	1	001
	2	011
	机器数：符号位+真值的绝对值
	真值：机器数对应的十进制中的值
	正数的原码、反码、补码都相同
	负数的反码就是原码取反
	负数的补码就是负数的反码取反加一
	负数在计算机中都是以补码的形式存在的。
	1、为运算符^
		当作为一元运算符的时候,就是取反的意思。
		^1=-2
		1取反1111 1110
		-2的补码 1111 1110
	
	

一、study-notes
1、学习xorm和golang的反射
	了解反射的应用场景。
	通过xorm查看了reflect中的几个方法，像MapIndex(key interface{}) 获取map中与key对应的Value等。
	看了几个博客的对于reflect的介绍
	reflecte的学习在reflect.txt中(github上可以找到对应对的)
2、channel的应用。
	在不同的场景用都可以看到。比如在线上项目中，
	可以通过channel来实现消息的共享，

channel引起panic的场景
	1、向一个已经关闭的通道发送数据
	2、从一个空的channel中获取数据
	3、在缓存通道中，向已经满了的通道中添加数据，会导致panic

channel的使用场景
	1、和goroutine一起使用(项目中真实用到了,比如开启一个goroutine,然后不停地消灭掉已经逃跑的怪物。
		这个rogoutine结束的标志就使用channel来传递信号的)runTimer方法就是这样的。
	2、比如开启一个web服务器的时候，比如在启动web服务的时候,在关闭服务器的时候，这个服务器一直在运行，代码在通道这里阻塞了，
		在关闭通道的时候,向这个通道中发送一个值,这样就可以关闭这个通道。（gin,,,gameservice.go里面的）
		/game/main.go里面可以看到
		开启一个web服务
			go func() {
				panicOnError(srv.ListenAndServe())
			}()

		关闭的时候gameSrc.Close就是向通道中放入一个值,等待其关闭。
	3、channel和select一起使用
	4、for...range..从一个通道中不停地获取数据。


	
	
	
	
	
	
	
	
	
	