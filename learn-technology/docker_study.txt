学习docker(国内)
https://yeasy.gitbooks.io/docker_practice/content/   
学习docker(台湾)
https://peihsinsu.gitbooks.io/docker-note-book/content/dockerfile-env-vs-arg.html

官网搜索镜像的网址
	https://hub.docker.com/_/docker/

笔记


*********************************
*********************************
earily notes
删除docker
https://www.cnblogs.com/q4486233/p/6482711.html


避免使用sudo docker
http://blog.csdn.net/baidu_36342103/article/details/69357438

传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。
docker比传统虚拟化的优势
	1、更快速的启动时间(直接在宿主的内核上跑的)
	2、有效利用资源(不用虚拟硬件环境)
	3、一致地运行环境(开发、测试、调试)
	
	
当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：

    检查本地是否存在指定的镜像，不存在就从公有仓库下载
    利用镜像创建并启动一个容器
    分配一个文件系统，并在只读的镜像层外面挂载一层可读写层
    从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去
    从地址池配置一个 ip 地址给容器
    执行用户指定的应用程序
    执行完毕后容器被终止
	
	
docker run 
	-d：就是让Docker在后台运行而不是直接把执行命令的结果输出在当前宿主主机下。
	-i:指的是交互
	-t:好像是伪命令框  
	--rm:关闭之后直接删除
docker container log [container id or names]
	用来获取容器的输出信息
docker container attach [container id or names]
	用来进入一个正在运行的容器
docker container restart [container id or names]
	用来重启一个容器
docker export [container id] > [压缩包名字]
docker container prune
	用于清理掉所有处于种植状态的容器
docker pull ubuntu:16.04
	从标准库下载镜像

docker history [imageId or imageName]
	用来查看镜像的历史

docker attach 和 docker  exec
	前者如果从stdin中exit的话,容器会停止
	docker exec从stdin中exec的话,容器不会停止
	
docker load 和docker import的区别
	
	区别一：
		docker load:导入镜像文件到本地镜像库
		docker import:从容器快照文件中再导入为镜像
	区别二:
		docker load:镜像存储文件保存完整记录,体积也大。
		docker import:保存的只是当时的状态,体积也小。(从容器快照文件导入时可以重新指定标签等元数据信息。)
ARG和ENV的区别
	相同点:都是设置环境变量
	不同点:
		ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。
		env:就是在内部定义一个变量,然后在Dockerfile内部使用
		arg:在内部定义一个变量以后,然后在外部也就是在build的时候使用
		docker build --build-arg VERSION=ubuntu:16.04
		
	在ENV與ARG參數的設定上，可以透過下面方式增加一些變化...
    ${variable:-word} 代表，如果variable有給值，則以variable設定的文字為主，如未設定，則以word字串為主。
    ${variable:+word} 代表，如果variable有給值，則值為word；如果variable未給值，則最後結果為空字串(empty)。



12.15日学习笔记
	golang模板语法
	https://gohugo.io/templates/lookup-order/
1、下载镜像的网址:https://hub.docker.com/explore/
2、下载镜像的格式
	docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
	具体的选项可以通过 docker pull --help 命令看到，这里我们说一下镜像名称的格式。
    Docker 镜像仓库地址：地址的格式一般是 <域名/IP>[:端口号]。默认地址是 Docker Hub。
    仓库名：如之前所说，这里的仓库名是两段式名称，即 <用户名>/<软件名>。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。
3、docker run -it --rm 
	--rm:表示容器退出之后将其删除,可以避免浪费空间
	
4、常用命令
	docker image ls
		列出镜像(一个镜像id对应多个tag标签)
	docker exec -it [container id] commandName（name）
		进入到一个正在运行的容器中
5、利用Dockerfile制作镜像文件
	镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。
	--auto-remove
	Dockerfile 支持 Shell 类的行尾添加 \ 的命令换行方式
	docker build [OPTIONS] PATH | URL | -
	制作镜像
	Dockerfile内容
	https://docs.docker.com/engine/reference/builder/(官方文档)
12.19日学习笔记
1、ARG参数构建
	Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。
	该默认值可以在构建命令 docker build 中用 --build-arg <参数名>=<值> 来覆盖
2、VOLUMN定义匿名卷
	容器在运行时,容器的存储层不应该发生写操作,对于数据库需要保持动态数据的应用,其数据库文件应该保存于卷(volumn)中
3、EXPOSE生命端口
	EXPOSE 指令是声明运行时容器提供服务端口
	要将 EXPOSE 和在运行时使用 -p <宿主端口>:<容器端口> 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。
4、在容器中管理数据主要有两种方式
	4.1、数据卷(Volumes)
	4.2、挂在主机目录(BInd mounts)
	
数据卷：	
    数据卷 可以在容器之间共享和重用
    对 数据卷 的修改会立马生效
    对 数据卷 的更新，不会影响镜像
    数据卷 默认会一直存在，即使容器被删除
	
在用 docker run 命令的时候，
	使用 --mount 标记来将 数据卷 挂载到容器里。
	 --volumes-from list 将创建的数据卷保存到容器里面
	 
	对于docker数据卷实现数据的共享
	
第一步:创建数据卷
	docker volumn create my-vol
第二步:创建容器
	docker run -it --name test-mount-volumn -v /my-vol ubuntu bin/bash
第三部:新启动一个容器,使用--volumn-from (第二步制定的容器名字) ubuntu bin/bash
	docker run -it --name second-mount --volumns-from [test-mount-volumn] [imageName] [commandName]
问题:
	1、实现数据卷之间数据的共享的话,就得新创建容器(是的)
	2、能不能给已经存在的容器挂载一个数据卷(好像不能)那样就会使用docker run,会基于镜像,重新创建一个新的容器
12.20日学习笔记
1、数据卷(VOLUMN)
	数据卷 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 数据卷。
	如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 docker rm -v 这个命令
2、将本地文件挂在到容器里面
	第一步:创建数据卷
		docker volumn create new-vol
	第二步:创建容器
		docker run -it -P --name three-test  -v /home/bg01/notes/doc:/opt/doc  ubuntu /bin/bash
		这里也可以挂载本地的主机文件 -v /home/bg01/doc/hello.txt:/opt/hello.txt
	注意:Docker 挂载主机目录的默认权限是 读写，用户也可以通过增加 readonly 指定为 只读。 
	  # -v /src/webapp:/opt/webapp:ro \
	  docker run -it -P --name three-test  -v /home/bg01/notes/doc:/opt/doc:ro ubuntu /bin/bash（这个新增加的目录只有只读权限)
3、Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。

	容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。

	当使用 -P 标记时，Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口。
	
	-p 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort
	

12.21日学习笔记
	关于网络,设计到网络的相关知识
		代理：本地与目标服务器的中间件
		网关:
		dns:域名解析,将http://www.baidu.com 解析成对应的ip地址
		ip地址找到某一台即主机,端口号找到服务器对应的服务的端口号
		
		外部访问容器(这是一些基础配置信息,可以简单的参考)
		https://yeasy.gitbooks.io/docker_practice/content/network/port_mapping.html
		
1、建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 --link 参数。
	step-one:新建一个网络
		docker netword create -d bridge my-net
	step-two:运行一个容器并连接到新建的my-net网络中
		docker run -it --rm --name busybox1 --network my-net busybox sh
	step-three:运行一个容器并连接到新建的my-net网络中
		dockr run -it --rm  --name busybox2 --network my-net busybox sh
	step-four:查看两个容器的ip,测试能否互相ping通
			docker container ls // 查看新建的容器信息
			ifconfig // 查看新建容器的ip信息
			ping ip  // 测试能否互相ping通
	备注：如果你有多个容器之间需要互相连接，推荐使用 Docker Compose。
		Docker Compose参考网址:
			https://yeasy.gitbooks.io/docker_practice/content/compose/
2、在ubuntu中可以使用mount来查看挂载信息
12.22日学习笔记
	今日没有学习docker。
	发现了一个问题,网络知识比较欠缺。
12.25日学习笔记。
	docker创建容器的时候,创建了一个主机和所有容器之间的一个虚拟共享网络。
	当创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。
	这对接口一端在容器内，即 eth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如 vethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信
	。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。

1、docker容器想要访问外部网络,需要本地系统的支持。在linux系统中,检查转发是否打卡使用 sysctl net.ipv4.ip_forward  返回1带包转发已经打开
	如果没有开启,则需要手动操作 sysctl net.ipv4.ip_forward=1
	如果在启动 Docker 服务的时候设定 --ip-forward=true, Docker 就会自动设定系统的 ip_forward 参数为 1。
2、docker容器之间的互联
	前提：
		2.1、容器的网络拓扑是否已经互联。默认情况下,所有的容器都会被连接到docker0网桥上。
		2.2、本地系统的防火墙软件  --iptables是否通过。
	默认情况下,不同容器之间是允许网路胡同的。但是为了安全考虑
		在/etc/default/docker中 配置DOCKER_OPTS=false来禁止它。



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

