## create at 2018.1.16
## go-git

一、学习网址
	1、github网址
		https://github.com/go-kit/kit  
	2、类似官网
		https://gokit.io/	
	3、go-kit service  sample
		https://gokit.io/examples/stringsvc.html#requests-and-responses
		http://www.ru-rocker.com/2017/02/24/micro-services-using-go-kit-grpc-endpoint/
	4、介绍go kit的一个网址
		http://peter.bourgon.org/go-kit/
	5、系列介绍的一个网址,不是太详细
		https://cylof22.gitbooks.io/microservices-in-go-using-go-kit/content/twelve-factor-application-and-microservice.html
	6、简书---（有一段话绍了go-kit,介绍了go-kit的结构、和每一层的作用）
		https://www.jianshu.com/p/0c34a75569b1
二、学习笔记
	微服务面向可重用性,对于构建需要高度弹性和可扩展性的大型应用程序非常有用,它不适用于小型吧部门级应用程序或小用户群你的应用程序。


	type Endpoint func(ctx context.Context, request interface{}) (response interface{}, err error)
	comments:这里是request和response都是定义的Service层中的request and response structs	


https://gist.github.com/posener/330c2b08aaefdea6f900ff0543773b2e
go-kit的缺点：----从github上某个人的观点
1、too verbose---太冗长
	当使用go-kit的时候,在服务中添加一个api的代价是非常昂贵的。
	serverce的借口,空struct的实现,对接口方法的编解码，对接口方法添加请求和响应的结构体，transport暴露给客户端
2、hard to understand--(at least for author)
	learn ServerHTTP function by heart to understand 
		how service is expected to behave
3、接口类型的API
	当使用go-kit的时候,端点得到一个interface类型的参数,并且返回一个interface类型和error类型的变量。
你需要明确地讲转换写入到你的实现函数中,而且你实现的endpoint方法就是下面实现的copy-paste。
func makeUppercaseEndpoint(svc StringService)endPoint.Endpoint{
	return func(ctx context.Context,request interface{})(interface{},error){
		req:=request.(myRequest)
		v,err:=svc.Function(myRequest)
		if err!=nil{
			return myResponse{v,err.Error()},nil
		}
		
		return myResponse{v,""},nil
	}
}

Transport logging
	Any component that needs to log should treat the logger like a dependency, same as a database connection.
	Middleware:一个中间件就是一个函数接收endpoint参数并且返回endpoint参数,类似如下结构。
		type Middleware func(Endpoint)Endpoint
	这个中间件可以做任何事情,下面是一个基础的ogging middleware方法

func loggintMiddleware(logger log.Logger)Middleware{
	return func(next endpoint.Endpoint)endpoint.Endpoint{
		return func(ctx context.Context,request interface{})(interface{},error){
			logger.Log("msg","calling endpoint")
			defer logger.Log("msg","called endpoint")
			return next(ctx,request)
		}
	}
}
	
	



go-kit:
	go-kit:本身不是一个框架,而是一套微服务工具集，其设计思想是--分层设计，组件化，可扩展。
	go-kit的架构分为三层结构：Transport层，Endpoint层，Service层。
	Transport层：主要负责与传输协议http,grpc,thrift等相关的逻辑。
		(
		
			重新定义一个结构体,实现Service层定义的方法
			对定义在Service层中的方法的每个input和output进行编码和解码。
			 grpctransport "github.com/go-kit/kit/transport/grpc"调用CreateServer 和CreateClent方法
		)
	Endpoint层：主要负责request/response格式的转换,以及公用拦截器相关的逻辑。
		(
			在为Service层接口中的方法产生Endpoint的过程中,要为每个方法定义 request and response structs,方便独立捕获所有的输入和输出参数
			接收一个Service层定义的一个Service值,找到对应的Endpoint返回
			这里定义一个Endpoint的结构体，返回一个endpoint.Endpoint,然后实现定义在Service层中的方法(--可以把Service层中定义的方法综合起来进行使用)			
		)
	Service层:专注与业务逻辑。
		(
			就是定义接口，用一个空的结构体来实现方法。
			在endpoint层提供了很多公用的拦截器，如log，metric，tracing，circuitbreaker，rate-limiter等
			,来保障业务系统的可用性。它们在设计上有一个共同特点：都是同传输协议无关的。
		)
服务发现和负载均衡
	Go kit 为不同的服务发现系统提供适配器,以获取最新的实例集,并作为单独的节点公开。这是适配器就是subscribes
	type Subscriber interface {
		Endpoints() ([]endpoint.Endpoint, error)
	}
	
	在内部,subscribers使用一个工厂函数来将每一个发现的实例字符串(很典型的例如：host：port),转为成一个可用的端点。
	type Factory func(instance string)(endpoint.Endpoint, error)

三、学习疑问

git@github.com:ru-rocker/gokit-playground.git



根据这个进行到了第五步了
http://www.ru-rocker.com/2017/02/24/micro-services-using-go-kit-grpc-endpoint/
四、随手笔记
	go-kit通过对端点的抽象,提供了许多功能。
	


go-kit  grpc


step1:定义服务-----Define Service

 	// ErrEmptyError is returned when input string is empty 
	var ErrEmptyError=errors.New("Request wrong")
	
	// define service interface
	type Service interface{
		Uppercase(context.Context,string)(string,error)
		Count(context.Context,string)int
	}
	
	// Implement  service with empty struct
	type StringService struct{}
	
	func(_ StringService)Uppercase(_ context.Context,s string)(string,error){
		if s==""{
			return "",ErrRequestError
		}
		return strings.ToUpper(s),nil
	}
	
	func(_ StringService)Count(_ context.Context, s string)int{
		return len(s)
	}

step2:请求和响应-----Requests and Response
	在go-kit中，消息的主要模式就是rpc，因此,在接口(step1中定义的方法)里面中的每一个方法，
都将会被建模然后作为一个远程的函数调用。对于每一个方法,我们定义一个request and response struct,
用来独立捕获所有的输入和输出参数。
	type uppercaseRequest struct {
		S string `json:"s"`
	}

	type uppercaseResponse struct {
		V   string `json:"v"`
		Err string `json:"err,omitempty"` // errors don't JSON-marshal, so we use a string
	}

	type countRequest struct {
		S string `json:"s"`
	}

	type countResponse struct {
		V int `json:"v"`
	}
step3:创建端点-----Endpoints
	go kit 通过Endpoints的抽象来提供它的大部分的功能。
	一个端点代表一个单独的rpc，也就是Service接口里面的一个单独的方法。
	这个端点和step1中的没有太大的区别，需要注意的是用Endpoints struct来实现Service结构体。
这个机制是在创建grpc客户端的时候所需要的。
	func makeUppercaseEndpoint(svc StringService) endpoint.Endpoint {
		return func(ctx context.Context, request interface{}) (interface{}, error) {
			req := request.(uppercaseRequest)
			v, err := svc.Uppercase(ctx, req.S)
			if err != nil {
				return uppercaseResponse{v, err.Error()}, nil
			}
			return uppercaseResponse{v, ""}, nil
		}
	}

	func makeCountEndpoint(svc StringService) endpoint.Endpoint {
		return func(ctx context.Context, request interface{}) (interface{}, error) {
			req := request.(countRequest)
			v := svc.Count(ctx, req.S)
			return countResponse{v}, nil
		}
	}
step:4:编码和解码(请求、响应)---Model Request and Response

	通常情况下,我们需要对请求和响应进项编码和解码。
	func decodeUppercaseRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request uppercaseRequest
	if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
		return nil, err
	}
		return request, nil
	}

	func decodeCountRequest(_ context.Context, r *http.Request) (interface{}, error) {
		var request countRequest
		if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
			return nil, err
		}
		return request, nil
	}

	func encodeResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
		return json.NewEncoder(w).Encode(response)
	}
step5:(Transports)
	需要将服务暴露给外界,以便它们调用。可供选择的方式有thrift、定制化的json over http。
	svc := stringService{}

	uppercaseHandler := httptransport.NewServer(
		makeUppercaseEndpoint(svc),
		decodeUppercaseRequest,
		encodeResponse,
	)

	countHandler := httptransport.NewServer(
		makeCountEndpoint(svc),
		decodeCountRequest,
		encodeResponse,
	)

	http.Handle("/uppercase", uppercaseHandler)
	http.Handle("/count", countHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))






































	
	
	
	
	
	
	
	
	
	