
BattleField结构体发生变化
P_ACK_BATTLEFIELD_RAND的结构体也发生变化



考虑：
	把战场的战斗数据存放在TBattle里面
	pveCaches	[]*pveStruct
	pveResults	[]*pveResult
	instanceId	int32

需要的数据

	随机一个对手
		自己的卡牌信息
		当前关卡记录
		历史最高关卡记录
		对手的卡牌信息
		pve数据




界面显示
战场：
	lv.28 谨慎的减价巴尔   vip1
	战力 所属工会
	胜利奖励	首胜奖励
	上阵的卡牌信息
	
竞技场:
	
	lv.28 谨慎的减价巴尔   vip1
	防守战力 所属工会
	胜利场数 胜利奖励
	卡牌信息
	
	
func getReward(player *data.TPlayer,currChapterId ,currId int32){

	processId:=currChapterId*100+currId
	
		
	/*
	
		*******************************第一部分****************************
	*/
	
	
	// 1.2 领取关卡奖励
	levelReward:=csv.CBattleFieldMap[processId]
	/*
		在这里领取关卡奖励
	*/
	
	
	// 1.2 领取章节奖励
	player.BattleField.CurrId+=1 ---------------------------------------------------- // 这里更改了当前关卡id
	if player.BattleField.CurrId>constant.BattleFieldMaxLevelsSingleVChapter{
		chapterReward:=csv.CBattleFieldChapterMap[currChapterId]
		/*
			领取通章奖励
		*/
		
	}
	
	// 1.3 首胜奖励
	if ！player.BattleField.OneTime.Test(uint(processId)){
		//领取首胜奖励
	}
	
	/*
	
		*******************************第二部分*****************************（可能改变的）
	*/
	
	// 2.1 更改关卡id 和章节id
	if player.BattleField.CurrId>constant.BattleFieldMaxLevelsSingleChapter{ // 通过了这一个章节
		player.BattleField.CurrId=1
		player.BattleField.CurrChapterId+=1
	}else{
		//  这里不用任何操作,因为之前的的关卡id已经在领取章节奖励的时候做过了
		//  章节id也保持不变
	}
	
	// 2.2 更改历史最高信息（这里的CurrId之前已经加过了，上面可能已经赋值为一）
		
	currPorcess:=player.BattleField.CurrChapterId*100+player.BattleField.CurrId
	maxProcess:=player.BattleField.MaxChapterId*100+player.BattleField.MaxId

	if currProcess>maxProcess{
				player.BattleField.MaxId+=1
				if player.BattleField.MaxId>constant.BattleFieldMaxLevelsSingleChapter{ // 通过了这一个章节的
					player.BattleField.MaxId=	0
					player.BattleField.MaxChapterId+=1
				}
		}


	
	
	
	
	fortress
	pvp
	
	
		player.BattleField.CurrId = 1 // 更改关卡id和章节id
		player.BattleField.CurrChapterId += 1
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
	