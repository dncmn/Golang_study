##2018.3.6
## daily-notes

一、bug fix
	1、暂时还没新任务
二、self learning
	2.1、学习数据结构的基础只是
		来源：
			1、web网页
			2、算法--第四版
	2.2、
		对于差值查找，需要记住那个公式
		对于斐波那契查找算法，需要加强理解一下
		
			
线性表特点：
	1、存储的数据结构相同
	2、各个元素的相对位置已经固定(相对位置:也就是各个数据元素在逻辑结构上的前后顺序)
	3、分类：
		顺序结构：数据元素在内存中集中存储,采用顺序表示结构
		链式结构：数据元素在内存中散列存储,采用链式表示结构
		
		
		顺序结构：数组、切片。
		链式结构:map、自己设计的数据结构：比如程序中用到的队列。

		顺序表的实现使用的数组。顺序表查询快、增删慢
	4、链表
		4.1、线性表的链式存储结构生成的表称作"链表"
		4.2、链表中数据元素(节点)的构成
			数据域：这个节点包含的信息
			指针域：指向下一个节点的指针
		4.3、链表分类
			单向链表、双向链表
		4.4、链表的几个小概念吧
			头结点：
			首元节点：链表中第一个元素所在的位置，它是头结点后边的第一个节点
			头指针：永远指向链表中第一个节点的位置
		4.5、对链表进行操作
			node1--->node2--->node3--->node4
			插入节点
				向链表插入新节点在(node2和node3之间)新节点node5
					node5保存node3的地址(将保存在node2中下一个节点的位置给node5)
					node2保存node5的地址(取出node2节点的位置,然后把它赋值给node2)
			删除节点
				比如现在删除node3
					(将node3节点的位置临时备份一下)
					node2保存node4节点的位置(将保存在node3中node4节点的位置赋值给node2)
					去掉node3
		4.6、线性表和链性表的比较
			链式存储添加或者删除一个元素很容易，但是查询慢
			线性存储查询快，增删慢
	5、静态链表
			静态链表使用数组这一个数据类型预先申请足够大的内存空间。
		5.1、逻辑结构上相邻的数据元素，存储在制定的一块内存空间中,数据元素值允许在这块内存空间中随机存放，这样的存储结构就是静态链表。
		5.2、静态链表和动态链表的区别
			静态链表限制了数据元素存放的位置范围
			动态链表是整个内存空间
		5.3、静态链表的空间重复利用
			在静态链表中，提前将所有未使用的节点链成一个备用链表。在需要对链表进行操作时,从备用链表中拿过来一个节点使用。
			在删除节点时,删除的同时链接到备用链表上(也就是把删除节点的信息添加到备用链表上)
		5.4、链表中节点的构成
			数据域和游标(游标：存放的是下一个节点在数组中的位置下标)
		5.5、静态链表的特点
			静态链表综合了顺序链表和动态链表的有点：使用数组来存储数据元素,便于做查找遍历操作。
			同时在数中节点了动态链表的特点，在链表中插入或者删除节点时只需要更改相关节点的游标，不需要移动大量元素。
			
			
			
			
			
			
			
			
			
			
	
		
			
			
好像线性表中的一个节点可以定义成



type node struct{
	
	previous *node
	data interface{}
	next	*node
	count int //表示节点的长度
}


func (this *node)New(date interface{})*node{

	return &node{data:date}
}


