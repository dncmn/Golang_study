## 2018.3.7
## daily-notes


一、self learning
1、练习基本的排序
	稳定排序：
		冒泡排序、插入排序、归并排序
	不稳定排序：
		选择排序、希尔排序、快速排序、堆排序
		
快速排序的代码
func quick_sort(array []int, start,end int)[]int{

	key:=array[start]
	low:=start
	high:=end
	
	for{
		
		// 从左边找比基准元素小的元素
		for low<high{
			if array[high]>key{
				array[low]=array[high] // 填坑
				break // 跳出循环
			}
			high--
		}
		
		// 从右边找比基准元素大的元素
		
		for low<high{
			if array[low]>key{
				array[high]=array[low]
				break
			}
			low++
		}
		
		// 左边的进行排序
		if low-1>start{
			quick_sort(array,start,low-1)
		}
		// 右边的进行排序
		if high+1<end{
			quick_sort(array,high+1,end)
		}
	}


}






type node struct{

	previous  *node
	date 	  interface{}
	next 	  *node
	count     int
}


## 双向链表
	golang中肯定使用结构体来实现。
	
	
node1---->node2---->node3---->node4


创建节点：
	当创建一个新的节点的时候：就是给一个节点添加上数据域,新添加节点的指针域均为空
	
追加节点：
	判断当前链表是否为空。
		当前节点为头结点：previous为nil。next也为nil。因为这时候就它一个节点
		比如新添加node1.
		node1.next=nil
		node1.previous=nil
	判断链表不为空。--也就是追加节点
		新添加节点的next为nil。新添加节点的previous为旧链表的最后一个元素的地址.
		新添加node4节点：
			node3.next=node4(node3.next之前为nil,现在为node4节点的位置) 
			node4.previous=node2.next(node2.next:也就是node3的地址)  
			node4.next=nil(因为是最后一个节点,所以不指向任何节点)
插入节点(不是追加)
	比如在node3和node2之间插入node4节点
	node3的地址：node2.next
	node2的地址：node3.previous
	
	node2指向node4: node2.next=node4
	node4指向node3:node4.next=node3
	
	node3指向node4:node3.previous=node4
	node4指向node2:node4.previous=node3.previous
	
	
	node1---->node2---->node3---->node4
删除节点
	删除头结点
		比如删除node1:
			node2.previous=nil
			node1.next=nil
	删除尾节点：
		比如删除node4:
			node3.next=nil
			node4.previous=nil
	删除中间的节点
		比如node2:
			node3的地址：node2.next
			node2的地址：node1.next
			node1的资质:node2.previous
			
			node1和node3互联
			node1.next=node2.next
			node3.previous=node2.previous
获取指定元素的长度
	直接返回node节点的count值就好

			


































	
		




























































