##2018.3.14
##近期要学习的东西

单元测试--Test,会写test用例---一个方法一个方法测试
	目的：在项目里面实现测试用例，为了每一个写过的方法都是可以测试的。
	在写卡牌游戏的时候，没有写过测试用例，就是写过之后看看这个代码能不能跑通，游戏玩起来的时候有没有bug.
	在写现在的游戏的时候，就像是某个model/service里面的方法都是可以测试的。或者一个完整的功能。比如某个controller都是可以测试的。
项目工具：
	Jenkins:项目部署工具，里面包含了一部分的shell脚本。（在shell脚本不变的情况下，会将代码部署到指定的环境）
	gitlab:和码云/github感觉都是一样的，都是一种代码管理工具。（现在是在自己的分支开发，然后再合并到dev分支）
	wiki:项目文档。这个的话，也算是比较规范的一种方式。比如接口api什么的都会在这里面定义。方便前后端交互。
		



content-type


1.gin
	看看之前有关gin的笔记(项目中的有关于gin的基本上看了一下流程)
	1.1、路由组和路由的编写
		/user/getUserInfo/:id   举例 /user/getUserInfo/1
		/user/modifyUserInfo/:id/*name 带星号表示可有可无。 /user/modifyUserInfo/1/tom 或者 /user/modifyUserInfo/1
	1.2、在controllers中参数的获取方式
		func userOpeController(c *gin.Context){
			c.Get("param Name") // 可以判断这个参数存不存在
			c.Query() // 剩下的这两个和路由定义的时候规则有关
			c.Param()
		}
		将参数转换为各种形式---可以通过中间参数[]byte来实现
	1.3、在返回的时候，之前用到了gin.H{},用它来构建
			可以c.JSON和c.H{}结合使用
			c.JSON(http.StatusOK,c.H{})
			c.JSON(code int,obj interface{})
			code:表示状态码
			obj:表示经过json化的，并且添加到response body中的数据
	
2.
	2.1、docker
		在gitbook上学习了一下docker的文档还有docker-compose
		基本可以看懂Dockerfile和docker-compose.yml的配置
	2.1、docker-compose
4.linux--要么是linux私房菜或者去gitbook上找到一本合适的书看看--脚本 6.脚本
3.gorm
	从gorm的建表，表中字段的类型，字段的名字，以及在启动gin的时候，自动建表。
	再到用gorm进行基本的单表的增删改查。以及陷入的bug(在用struct进行更新的时候，字段为0，“”，false的全表更新)
	今天（2018.5.9）又对gorm系统的大概过了一遍，看了看关联什么的，部分查询什么的。

5.nginx
7.游戏数据库postal---因为使用了orm,所以也就是对于gorm的熟悉了
8.分布式锁
9.php
protobuf
grpc
consul

	raft
	Gossip